// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === AUTH MODELS ===
enum UserRole {
  JEFE
  ASISTENTE
  GERENTE
  AYUDANTE
}

model User {
  id              Int @id @default(autoincrement())
  username        String @unique
  password        String
  email           String? @unique
  firstName       String?
  lastName        String?
  phoneNumber     String?
  avatarUrl       String?
  role            UserRole @default(AYUDANTE)
  isActive        Boolean @default(true)
  isAuthenticated Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("users")
}

// === PRODUCT/INVENTORY MODELS ===
model Product {
  id            Int @id @default(autoincrement())
  codigo        String @unique
  nombre        String
  costoUnitario Float
  ubicacion     String
  entradas      Int    @default(0)
  salidas       Int    @default(0) 
  stockActual   Int    @default(0)
  stockMinimo   Int    @default(0)
  unidadMedida  String
  proveedor     String
  marca         String?
  costoTotal    Float  @default(0)
  categoria     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  movementEntries MovementEntry[]
  movementExits   MovementExit[]

  @@map("products")
}

// === MOVEMENT MODELS ===
model MovementEntry {
  id             Int @id @default(autoincrement())
  fecha          String // Format: "DD/MM/YYYY"
  codigoProducto String
  descripcion    String
  precioUnitario Float
  cantidad       Int
  responsable    String?
  area          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product       Product @relation(fields: [codigoProducto], references: [codigo])

  @@map("movement_entries")
}

model MovementExit {
  id             Int @id @default(autoincrement())
  fecha          String // Format: "DD/MM/YYYY"
  codigoProducto String
  descripcion    String
  precioUnitario Float
  cantidad       Int
  responsable    String?
  area          String?
  proyecto      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product       Product @relation(fields: [codigoProducto], references: [codigo])

  @@map("movement_exits")
}

// === EQUIPMENT MODELS ===
enum EstadoEquipo {
  Bueno
  Regular
  Malo
  En_Reparacion
  Danado
}

model EquipmentReport {
  id              Int @id @default(autoincrement())
  equipo          String
  serieCodigo     String
  cantidad        Int
  estadoEquipo    EstadoEquipo
  responsable     String
  fechaSalida     String
  horaSalida      String
  areaProyecto    String
  firma           String
  fechaRetorno    String?
  horaRetorno     String?
  estadoRetorno   EstadoEquipo?
  firmaRetorno    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("equipment_reports")
}

// === PROVIDERS MODEL ===
model Provider {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  address   String
  phones    String[] // Array de strings para múltiples teléfonos
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("providers")
}

// === CONFIGURATION MODELS ===
model Area {
  id     Int @id @default(autoincrement())
  nombre String @unique

  @@map("areas")
}
